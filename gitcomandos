Front end>>getbootstrap // layoutit
HTTRACK

>>> w3schools mysql<<< documentação MYSQL
>>>>>> Subir arquivo para o github <<<<<
>>>Terminal<<<

git checkout -b aula0804 
git add .
git commit -m " "
git push origin aula0804

apos finalizar a tarefa:  git checkout main  -> git pull   -> criar nova pasta, para nova tarefa.

#clone github#
> Fork
>comando:
>git clone + URL
>cd nome_do_repositorio  (tab)


>>>>>> Pull requests <<<<<
>>>>>> 

>>> Spring <<<
<<Spring Boot>>
documentação do Spring: https://spring.io/projects/spring-boot
(initializr)
criação de projetos: https://start.spring.io/

(necessario as configurações antes de inicializar o projeto)
project - Maven
Language - Java
Spring Boot - 3.2.4
Packaging - Jar
Java - 17

Project Metadata:  

Group - com.soulcode
Artifact - produtos-api
Name - produtos-api
Description - primeiro spring criado
Package name - com.soulcode.produtos-api 
Dependencies(bibliotecas - spring funcione):
-> Spring Web
-> Spring Data JPA
-> Spring Boot DevTools - inicialização
-> Thymeleaf
-> MySQL Driver (usar com mysql)
..................GENERATE..................
>>> abrir pasta dentro do intellij > http://localhost:8080/
pastatemplate -> inserir paginas html -> file html


##Usando MySQL e o java: (CONFIGURAÇÃO, ERRO:Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.)
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

spring.datasource.url=jdbc:mysql://localhost:3306/api (nome do banco mysql)
spring.datasource.username=root
spring.datasource.password=senha MySQL

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.show_sql=true

##Criando a classe - Banco de dados:
@Entity
public class Usuario {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column
    private String nome;
    
    @Column 
    private String email;
    
    @Column
    private int idade;

-> criar um Controller -  possui:

 @Autowired   ( injetar uma dependência diretamente em uma propriedade da classe:)
    private UsuarioRepository usuarioRepository;
 @RequestMapping(value = "/cadusuario", method = RequestMethod.POST) // cadastrar usa POST     //usar Postman - ativar link http://localhost:8080/cadusuario
    public Usuario save(){
        Usuario u = new Usuario();

-> criar pasta model -> onde será criado nossas classes;
-> criar pasta repositories -> repository ( nosso repositorio - banco de dados)

    -> interface: public interface UsuarioRepository extends JpaRepository<Usuario, Long> {





